{
  "documentationLink": "https://developers.google.com/photos/",
  "canonicalName": "Photos Library",
  "basePath": "",
  "ownerDomain": "google.com",
  "resources": {
    "mediaItems": {
      "methods": {
        "batchCreate": {
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary",
            "https://www.googleapis.com/auth/photoslibrary.appendonly",
            "https://www.googleapis.com/auth/photoslibrary.sharing"
          ],
          "request": {
            "$ref": "BatchCreateMediaItemsRequest"
          },
          "response": {
            "$ref": "BatchCreateMediaItemsResponse"
          },
          "id": "photoslibrary.mediaItems.batchCreate",
          "description": "Creates one or more media items in a user's Google Photos library. This is the second step for creating a media item. For details regarding Step 1, uploading the raw bytes to a Google Server, see Uploading media. This call adds the media item to the library. If an album `id` is specified, the call adds the media item to the album too. Each album can contain up to 20,000 media items. By default, the media item will be added to the end of the library or album. If an album `id` and position are both defined, the media item is added to the album at the specified position. If the call contains multiple media items, they're added at the specified position. If you are creating a media item in a shared album where you are not the owner, you are not allowed to position the media item. Doing so will result in a `BAD REQUEST` error.",
          "path": "v1/mediaItems:batchCreate",
          "httpMethod": "POST",
          "flatPath": "v1/mediaItems:batchCreate",
          "parameters": {},
          "parameterOrder": []
        },
        "patch": {
          "response": {
            "$ref": "MediaItem"
          },
          "parameters": {
            "id": {
              "pattern": "^[^/]+$",
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Identifier for the media item. This is a persistent identifier that can be used between sessions to identify this media item."
            },
            "updateMask": {
              "description": "Required. Indicate what fields in the provided media item to update. The only valid value is `description`.",
              "location": "query",
              "type": "string",
              "format": "google-fieldmask"
            }
          },
          "httpMethod": "PATCH",
          "path": "v1/mediaItems/{+id}",
          "flatPath": "v1/mediaItems/{mediaItemsId}",
          "description": "Update the media item with the specified `id`. Only the `id` and `description` fields of the media item are read. The media item must have been created by the developer via the API and must be owned by the user.",
          "parameterOrder": [
            "id"
          ],
          "id": "photoslibrary.mediaItems.patch",
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary.edit.appcreateddata"
          ],
          "request": {
            "$ref": "MediaItem"
          }
        },
        "batchGet": {
          "path": "v1/mediaItems:batchGet",
          "id": "photoslibrary.mediaItems.batchGet",
          "flatPath": "v1/mediaItems:batchGet",
          "parameters": {
            "mediaItemIds": {
              "description": "Required. Identifiers of the media items to be requested. Must not contain repeated identifiers and cannot be empty. The maximum number of media items that can be retrieved in one call is 50.",
              "repeated": true,
              "type": "string",
              "location": "query"
            }
          },
          "response": {
            "$ref": "BatchGetMediaItemsResponse"
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary",
            "https://www.googleapis.com/auth/photoslibrary.readonly",
            "https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata"
          ],
          "parameterOrder": [],
          "description": "Returns the list of media items for the specified media item identifiers. Items are returned in the same order as the supplied identifiers."
        },
        "list": {
          "response": {
            "$ref": "ListMediaItemsResponse"
          },
          "parameterOrder": [],
          "httpMethod": "GET",
          "parameters": {
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "A continuation token to get the next page of the results. Adding this to the request returns the rows after the `pageToken`. The `pageToken` should be the value returned in the `nextPageToken` parameter in the response to the `listMediaItems` request."
            },
            "pageSize": {
              "location": "query",
              "format": "int32",
              "type": "integer",
              "description": "Maximum number of media items to return in the response. Fewer media items might be returned than the specified number. The default `pageSize` is 25, the maximum is 100."
            }
          },
          "flatPath": "v1/mediaItems",
          "path": "v1/mediaItems",
          "description": "List all media items from a user's Google Photos library.",
          "id": "photoslibrary.mediaItems.list",
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary",
            "https://www.googleapis.com/auth/photoslibrary.readonly",
            "https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata"
          ]
        },
        "get": {
          "httpMethod": "GET",
          "response": {
            "$ref": "MediaItem"
          },
          "parameterOrder": [
            "mediaItemId"
          ],
          "id": "photoslibrary.mediaItems.get",
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary",
            "https://www.googleapis.com/auth/photoslibrary.readonly",
            "https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata"
          ],
          "parameters": {
            "mediaItemId": {
              "description": "Required. Identifier of the media item to be requested.",
              "location": "path",
              "required": true,
              "type": "string",
              "pattern": "^[^/]+$"
            }
          },
          "flatPath": "v1/mediaItems/{mediaItemsId}",
          "path": "v1/mediaItems/{+mediaItemId}",
          "description": "Returns the media item for the specified media item identifier."
        },
        "search": {
          "response": {
            "$ref": "SearchMediaItemsResponse"
          },
          "httpMethod": "POST",
          "request": {
            "$ref": "SearchMediaItemsRequest"
          },
          "parameterOrder": [],
          "path": "v1/mediaItems:search",
          "flatPath": "v1/mediaItems:search",
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary",
            "https://www.googleapis.com/auth/photoslibrary.readonly",
            "https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata"
          ],
          "description": "Searches for media items in a user's Google Photos library. If no filters are set, then all media items in the user's library are returned. If an album is set, all media items in the specified album are returned. If filters are specified, media items that match the filters from the user's library are listed. If you set both the album and the filters, the request results in an error.",
          "id": "photoslibrary.mediaItems.search",
          "parameters": {}
        }
      }
    },
    "albums": {
      "methods": {
        "patch": {
          "description": "Update the album with the specified `id`. Only the `id`, `title` and `cover_photo_media_item_id` fields of the album are read. The album must have been created by the developer via the API and must be owned by the user.",
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary.edit.appcreateddata"
          ],
          "id": "photoslibrary.albums.patch",
          "flatPath": "v1/albums/{albumsId}",
          "httpMethod": "PATCH",
          "parameterOrder": [
            "id"
          ],
          "path": "v1/albums/{+id}",
          "parameters": {
            "id": {
              "type": "string",
              "required": true,
              "pattern": "^[^/]+$",
              "location": "path",
              "description": "Identifier for the album. This is a persistent identifier that can be used between sessions to identify this album."
            },
            "updateMask": {
              "type": "string",
              "description": "Required. Indicate what fields in the provided album to update. The only valid values are `title` and `cover_photo_media_item_id`.",
              "format": "google-fieldmask",
              "location": "query"
            }
          },
          "request": {
            "$ref": "Album"
          },
          "response": {
            "$ref": "Album"
          }
        },
        "batchRemoveMediaItems": {
          "flatPath": "v1/albums/{albumsId}:batchRemoveMediaItems",
          "httpMethod": "POST",
          "response": {
            "$ref": "BatchRemoveMediaItemsFromAlbumResponse"
          },
          "parameterOrder": [
            "albumId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary"
          ],
          "request": {
            "$ref": "BatchRemoveMediaItemsFromAlbumRequest"
          },
          "path": "v1/albums/{+albumId}:batchRemoveMediaItems",
          "description": "Removes one or more media items from a specified album. The media items and the album must have been created by the developer via the API. For albums that are shared, this action is only supported for media items that were added to the album by this user, or for all media items if the album was created by this user. Partial success is not supported. The entire request will fail and no action will be performed on the album if an invalid media item or album is specified.",
          "id": "photoslibrary.albums.batchRemoveMediaItems",
          "parameters": {
            "albumId": {
              "required": true,
              "pattern": "^[^/]+$",
              "location": "path",
              "type": "string",
              "description": "Required. Identifier of the Album that the media items are to be removed from."
            }
          }
        },
        "get": {
          "path": "v1/albums/{+albumId}",
          "flatPath": "v1/albums/{albumsId}",
          "parameters": {
            "albumId": {
              "location": "path",
              "description": "Required. Identifier of the album to be requested.",
              "type": "string",
              "required": true,
              "pattern": "^[^/]+$"
            }
          },
          "httpMethod": "GET",
          "response": {
            "$ref": "Album"
          },
          "description": "Returns the album based on the specified `albumId`. The `albumId` must be the ID of an album owned by the user or a shared album that the user has joined.",
          "id": "photoslibrary.albums.get",
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary",
            "https://www.googleapis.com/auth/photoslibrary.readonly",
            "https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata"
          ],
          "parameterOrder": [
            "albumId"
          ]
        },
        "create": {
          "parameters": {},
          "id": "photoslibrary.albums.create",
          "httpMethod": "POST",
          "description": "Creates an album in a user's Google Photos library.",
          "response": {
            "$ref": "Album"
          },
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary",
            "https://www.googleapis.com/auth/photoslibrary.appendonly",
            "https://www.googleapis.com/auth/photoslibrary.sharing"
          ],
          "parameterOrder": [],
          "request": {
            "$ref": "CreateAlbumRequest"
          },
          "path": "v1/albums",
          "flatPath": "v1/albums"
        },
        "list": {
          "description": "Lists all albums shown to a user in the Albums tab of the Google Photos app.",
          "flatPath": "v1/albums",
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary",
            "https://www.googleapis.com/auth/photoslibrary.readonly",
            "https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata"
          ],
          "path": "v1/albums",
          "id": "photoslibrary.albums.list",
          "httpMethod": "GET",
          "parameterOrder": [],
          "parameters": {
            "excludeNonAppCreatedData": {
              "type": "boolean",
              "location": "query",
              "description": "If set, the results exclude media items that were not created by this app. Defaults to false (all albums are returned). This field is ignored if the photoslibrary.readonly.appcreateddata scope is used."
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "A continuation token to get the next page of the results. Adding this to the request returns the rows after the `pageToken`. The `pageToken` should be the value returned in the `nextPageToken` parameter in the response to the `listAlbums` request."
            },
            "pageSize": {
              "location": "query",
              "format": "int32",
              "description": "Maximum number of albums to return in the response. Fewer albums might be returned than the specified number. The default `pageSize` is 20, the maximum is 50.",
              "type": "integer"
            }
          },
          "response": {
            "$ref": "ListAlbumsResponse"
          }
        },
        "batchAddMediaItems": {
          "description": "Adds one or more media items in a user's Google Photos library to an album. The media items and albums must have been created by the developer via the API. Media items are added to the end of the album. If multiple media items are given, they are added in the order specified in this call. Each album can contain up to 20,000 media items. Only media items that are in the user's library can be added to an album. For albums that are shared, the album must either be owned by the user or the user must have joined the album as a collaborator. Partial success is not supported. The entire request will fail if an invalid media item or album is specified.",
          "path": "v1/albums/{+albumId}:batchAddMediaItems",
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary",
            "https://www.googleapis.com/auth/photoslibrary.appendonly",
            "https://www.googleapis.com/auth/photoslibrary.sharing"
          ],
          "httpMethod": "POST",
          "flatPath": "v1/albums/{albumsId}:batchAddMediaItems",
          "id": "photoslibrary.albums.batchAddMediaItems",
          "request": {
            "$ref": "BatchAddMediaItemsToAlbumRequest"
          },
          "parameterOrder": [
            "albumId"
          ],
          "parameters": {
            "albumId": {
              "description": "Required. Identifier of the Album that the media items are added to.",
              "type": "string",
              "required": true,
              "location": "path",
              "pattern": "^[^/]+$"
            }
          },
          "response": {
            "$ref": "BatchAddMediaItemsToAlbumResponse"
          }
        },
        "share": {
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary.sharing"
          ],
          "response": {
            "$ref": "ShareAlbumResponse"
          },
          "request": {
            "$ref": "ShareAlbumRequest"
          },
          "path": "v1/albums/{+albumId}:share",
          "parameterOrder": [
            "albumId"
          ],
          "flatPath": "v1/albums/{albumsId}:share",
          "description": "Marks an album as shared and accessible to other users. This action can only be performed on albums which were created by the developer via the API.",
          "parameters": {
            "albumId": {
              "location": "path",
              "type": "string",
              "pattern": "^[^/]+$",
              "description": "Required. Identifier of the album to be shared. This `albumId` must belong to an album created by the developer.",
              "required": true
            }
          },
          "id": "photoslibrary.albums.share",
          "httpMethod": "POST"
        },
        "addEnrichment": {
          "httpMethod": "POST",
          "response": {
            "$ref": "AddEnrichmentToAlbumResponse"
          },
          "parameters": {
            "albumId": {
              "description": "Required. Identifier of the album where the enrichment is to be added.",
              "pattern": "^[^/]+$",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "request": {
            "$ref": "AddEnrichmentToAlbumRequest"
          },
          "parameterOrder": [
            "albumId"
          ],
          "description": "Adds an enrichment at a specified position in a defined album.",
          "id": "photoslibrary.albums.addEnrichment",
          "path": "v1/albums/{+albumId}:addEnrichment",
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary",
            "https://www.googleapis.com/auth/photoslibrary.appendonly",
            "https://www.googleapis.com/auth/photoslibrary.sharing"
          ],
          "flatPath": "v1/albums/{albumsId}:addEnrichment"
        },
        "unshare": {
          "request": {
            "$ref": "UnshareAlbumRequest"
          },
          "path": "v1/albums/{+albumId}:unshare",
          "parameterOrder": [
            "albumId"
          ],
          "httpMethod": "POST",
          "parameters": {
            "albumId": {
              "required": true,
              "pattern": "^[^/]+$",
              "location": "path",
              "description": "Required. Identifier of the album to be unshared. This album id must belong to an album created by the developer.",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary.sharing"
          ],
          "flatPath": "v1/albums/{albumsId}:unshare",
          "id": "photoslibrary.albums.unshare",
          "description": "Marks a previously shared album as private. This means that the album is no longer shared and all the non-owners will lose access to the album. All non-owner content will be removed from the album. If a non-owner has previously added the album to their library, they will retain all photos in their library. This action can only be performed on albums which were created by the developer via the API.",
          "response": {
            "$ref": "UnshareAlbumResponse"
          }
        }
      }
    },
    "sharedAlbums": {
      "methods": {
        "list": {
          "httpMethod": "GET",
          "path": "v1/sharedAlbums",
          "description": "Lists all shared albums available in the Sharing tab of the user's Google Photos app.",
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary",
            "https://www.googleapis.com/auth/photoslibrary.readonly",
            "https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata"
          ],
          "parameterOrder": [],
          "flatPath": "v1/sharedAlbums",
          "response": {
            "$ref": "ListSharedAlbumsResponse"
          },
          "parameters": {
            "pageSize": {
              "type": "integer",
              "description": "Maximum number of albums to return in the response. Fewer albums might be returned than the specified number. The default `pageSize` is 20, the maximum is 50.",
              "location": "query",
              "format": "int32"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "A continuation token to get the next page of the results. Adding this to the request returns the rows after the `pageToken`. The `pageToken` should be the value returned in the `nextPageToken` parameter in the response to the `listSharedAlbums` request."
            },
            "excludeNonAppCreatedData": {
              "description": "If set, the results exclude media items that were not created by this app. Defaults to false (all albums are returned). This field is ignored if the photoslibrary.readonly.appcreateddata scope is used.",
              "type": "boolean",
              "location": "query"
            }
          },
          "id": "photoslibrary.sharedAlbums.list"
        },
        "leave": {
          "description": "Leaves a previously-joined shared album on behalf of the Google Photos user. The user must not own this album.",
          "httpMethod": "POST",
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary.sharing"
          ],
          "response": {
            "$ref": "LeaveSharedAlbumResponse"
          },
          "path": "v1/sharedAlbums:leave",
          "id": "photoslibrary.sharedAlbums.leave",
          "request": {
            "$ref": "LeaveSharedAlbumRequest"
          },
          "parameters": {},
          "flatPath": "v1/sharedAlbums:leave"
        },
        "join": {
          "parameterOrder": [],
          "path": "v1/sharedAlbums:join",
          "description": "Joins a shared album on behalf of the Google Photos user.",
          "parameters": {},
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary.sharing"
          ],
          "httpMethod": "POST",
          "id": "photoslibrary.sharedAlbums.join",
          "request": {
            "$ref": "JoinSharedAlbumRequest"
          },
          "flatPath": "v1/sharedAlbums:join",
          "response": {
            "$ref": "JoinSharedAlbumResponse"
          }
        },
        "get": {
          "flatPath": "v1/sharedAlbums/{sharedAlbumsId}",
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary.sharing"
          ],
          "parameterOrder": [
            "shareToken"
          ],
          "httpMethod": "GET",
          "parameters": {
            "shareToken": {
              "type": "string",
              "description": "Required. Share token of the album to be requested.",
              "location": "path",
              "pattern": "^[^/]+$",
              "required": true
            }
          },
          "description": "Returns the album based on the specified `shareToken`.",
          "response": {
            "$ref": "Album"
          },
          "path": "v1/sharedAlbums/{+shareToken}",
          "id": "photoslibrary.sharedAlbums.get"
        }
      }
    }
  },
  "description": "Manage photos, videos, and albums in Google Photos ",
  "fullyEncodeReservedExpansion": true,
  "servicePath": "",
  "rootUrl": "https://photoslibrary.googleapis.com/",
  "protocol": "rest",
  "name": "photoslibrary",
  "ownerName": "Google",
  "batchPath": "batch",
  "version_module": true,
  "parameters": {
    "oauth_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth 2.0 token for the current user."
    },
    "prettyPrint": {
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "location": "query",
      "type": "boolean"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string",
      "location": "query"
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    },
    "access_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth access token."
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "description": "V1 error format.",
      "location": "query",
      "enum": [
        "1",
        "2"
      ]
    },
    "upload_protocol": {
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query",
      "type": "string"
    },
    "alt": {
      "location": "query",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "default": "json",
      "description": "Data format for response."
    },
    "uploadType": {
      "location": "query",
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    }
  },
  "kind": "discovery#restDescription",
  "version": "v1",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "mtlsRootUrl": "https://photoslibrary.mtls.googleapis.com/",
  "revision": "20210901",
  "baseUrl": "https://photoslibrary.googleapis.com/",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/photoslibrary.edit.appcreateddata": {
          "description": "Edit the info in your photos, videos, and albums created within this app, including titles, descriptions, and covers"
        },
        "https://www.googleapis.com/auth/photoslibrary.appendonly": {
          "description": "Add to your Google Photos library"
        },
        "https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata": {
          "description": "Manage photos added by this app"
        },
        "https://www.googleapis.com/auth/photoslibrary.readonly": {
          "description": "View your Google Photos library"
        },
        "https://www.googleapis.com/auth/photoslibrary.sharing": {
          "description": "Manage and add to shared albums on your behalf"
        },
        "https://www.googleapis.com/auth/photoslibrary": {
          "description": "See, upload, and organize items in your Google Photos library"
        }
      }
    }
  },
  "schemas": {
    "BatchRemoveMediaItemsFromAlbumResponse": {
      "type": "object",
      "properties": {},
      "description": "Response for successfully removing all specified media items from the album.",
      "id": "BatchRemoveMediaItemsFromAlbumResponse"
    },
    "NewMediaItem": {
      "description": "New media item that's created in a user's Google Photos account.",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the media item. This will be shown to the user in the item's info section in the Google Photos app. This string shouldn't be more than 1000 characters."
        },
        "simpleMediaItem": {
          "$ref": "SimpleMediaItem",
          "description": "A new media item that has been uploaded via the included `uploadToken`."
        }
      },
      "id": "NewMediaItem"
    },
    "MediaTypeFilter": {
      "properties": {
        "mediaTypes": {
          "items": {
            "enumDescriptions": [
              "Treated as if no filters are applied. All media types are included.",
              "All media items that are considered videos. This also includes movies the user has created using the Google Photos app.",
              "All media items that are considered photos. This includes .bmp, .gif, .ico, .jpg (and other spellings), .tiff, .webp and special photo types such as iOS live photos, Android motion photos, panoramas, photospheres."
            ],
            "enum": [
              "ALL_MEDIA",
              "VIDEO",
              "PHOTO"
            ],
            "type": "string"
          },
          "type": "array",
          "description": "The types of media items to be included. This field should be populated with only one media type. If you specify multiple media types, it results in an error."
        }
      },
      "description": "This filter defines the type of media items to be returned, for example, videos or photos. Only one media type is supported.",
      "type": "object",
      "id": "MediaTypeFilter"
    },
    "LocationEnrichment": {
      "properties": {
        "location": {
          "$ref": "Location",
          "description": "Location for this enrichment item."
        }
      },
      "id": "LocationEnrichment",
      "type": "object",
      "description": "An enrichment containing a single location."
    },
    "UnshareAlbumResponse": {
      "type": "object",
      "id": "UnshareAlbumResponse",
      "properties": {},
      "description": "Response of a successful unshare of a shared album."
    },
    "TextEnrichment": {
      "properties": {
        "text": {
          "type": "string",
          "description": "Text for this enrichment item."
        }
      },
      "id": "TextEnrichment",
      "type": "object",
      "description": "An enrichment containing text."
    },
    "ListMediaItemsResponse": {
      "id": "ListMediaItemsResponse",
      "properties": {
        "mediaItems": {
          "type": "array",
          "items": {
            "$ref": "MediaItem"
          },
          "description": "Output only. List of media items in the user's library."
        },
        "nextPageToken": {
          "description": "Output only. Token to use to get the next set of media items. Its presence is the only reliable indicator of more media items being available in the next request.",
          "type": "string"
        }
      },
      "description": "List of all media items from the user's Google Photos library.",
      "type": "object"
    },
    "NewMediaItemResult": {
      "type": "object",
      "properties": {
        "mediaItem": {
          "description": "Media item created with the upload token. It's populated if no errors occurred and the media item was created successfully.",
          "$ref": "MediaItem"
        },
        "status": {
          "description": "If an error occurred during the creation of this media item, this field is populated with information related to the error. For details regarding this field, see Status.",
          "$ref": "Status"
        },
        "uploadToken": {
          "type": "string",
          "description": "The upload token used to create this new media item."
        }
      },
      "id": "NewMediaItemResult",
      "description": "Result of creating a new media item."
    },
    "SimpleMediaItem": {
      "description": "A simple media item to be created in Google Photos via an upload token.",
      "properties": {
        "uploadToken": {
          "type": "string",
          "description": "Token identifying the media bytes that have been uploaded to Google."
        },
        "fileName": {
          "description": "File name with extension of the media item. This is shown to the user in Google Photos. The file name specified during the byte upload process is ignored if this field is set. The file name, including the file extension, shouldn't be more than 255 characters. This is an optional field.",
          "type": "string"
        }
      },
      "id": "SimpleMediaItem",
      "type": "object"
    },
    "MapEnrichment": {
      "properties": {
        "origin": {
          "$ref": "Location",
          "description": "Origin location for this enrichment item."
        },
        "destination": {
          "description": "Destination location for this enrichemt item.",
          "$ref": "Location"
        }
      },
      "type": "object",
      "id": "MapEnrichment",
      "description": "An enrichment containing a map, showing origin and destination locations."
    },
    "BatchCreateMediaItemsRequest": {
      "id": "BatchCreateMediaItemsRequest",
      "properties": {
        "newMediaItems": {
          "description": "Required. List of media items to be created.",
          "items": {
            "$ref": "NewMediaItem"
          },
          "type": "array"
        },
        "albumPosition": {
          "description": "Position in the album where the media items are added. If not specified, the media items are added to the end of the album (as per the default value, that is, `LAST_IN_ALBUM`). The request fails if this field is set and the `albumId` is not specified. The request will also fail if you set the field and are not the owner of the shared album.",
          "$ref": "AlbumPosition"
        },
        "albumId": {
          "description": "Identifier of the album where the media items are added. The media items are also added to the user's library. This is an optional field.",
          "type": "string"
        }
      },
      "description": "Request to create one or more media items in a user's Google Photos library. If an `albumid` is specified, the media items are also added to that album. `albumPosition` is optional and can only be specified if an `albumId` is set.",
      "type": "object"
    },
    "Location": {
      "properties": {
        "locationName": {
          "description": "Name of the location to be displayed.",
          "type": "string"
        },
        "latlng": {
          "description": "Position of the location on the map.",
          "$ref": "LatLng"
        }
      },
      "description": "Represents a physical location.",
      "type": "object",
      "id": "Location"
    },
    "ShareInfo": {
      "properties": {
        "sharedAlbumOptions": {
          "$ref": "SharedAlbumOptions",
          "description": "Options that control whether someone can add media items to, or comment on a shared album."
        },
        "shareToken": {
          "type": "string",
          "description": "A token that is used to join, leave, or retrieve the details of a shared album on behalf of a user who isn't the owner. A `shareToken` is invalidated if the owner turns off link sharing in the Google Photos app, or if the album is unshared."
        },
        "isOwned": {
          "type": "boolean",
          "description": "True if the user owns the album."
        },
        "shareableUrl": {
          "type": "string",
          "description": "A link to the shared Google Photos album. Anyone with the link can view the contents of the album, so it should be treated with care. The `shareableUrl` parameter is only returned if the album has link sharing turned on. If a user is already joined to an album that isn't link-shared, they can use the album's [`productUrl`](https://developers.google.com/photos/library/reference/rest/v1/albums#Album) to access it instead. A `shareableUrl` is invalidated if the owner turns off link sharing in the Google Photos app, or if the album is unshared."
        },
        "isJoined": {
          "description": "True if the user is joined to the album. This is always true for the owner of the album.",
          "type": "boolean"
        },
        "isJoinable": {
          "type": "boolean",
          "description": "True if the album can be joined by users."
        }
      },
      "type": "object",
      "description": "Information about albums that are shared. This information is only included if you created the album, it is shared and you have the sharing scope.",
      "id": "ShareInfo"
    },
    "Status": {
      "type": "object",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
        },
        "details": {
          "type": "array",
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          }
        }
      },
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "Filters": {
      "properties": {
        "excludeNonAppCreatedData": {
          "type": "boolean",
          "description": "If set, the results exclude media items that were not created by this app. Defaults to false (all media items are returned). This field is ignored if the photoslibrary.readonly.appcreateddata scope is used."
        },
        "includeArchivedMedia": {
          "description": "If set, the results include media items that the user has archived. Defaults to false (archived media items aren't included).",
          "type": "boolean"
        },
        "dateFilter": {
          "$ref": "DateFilter",
          "description": "Filters the media items based on their creation date."
        },
        "contentFilter": {
          "$ref": "ContentFilter",
          "description": "Filters the media items based on their content."
        },
        "mediaTypeFilter": {
          "$ref": "MediaTypeFilter",
          "description": "Filters the media items based on the type of media."
        },
        "featureFilter": {
          "$ref": "FeatureFilter",
          "description": "Filters the media items based on their features."
        }
      },
      "description": "Filters that can be applied to a media item search. If multiple filter options are specified, they're treated as AND with each other.",
      "type": "object",
      "id": "Filters"
    },
    "ListAlbumsResponse": {
      "description": "List of albums requested.",
      "type": "object",
      "id": "ListAlbumsResponse",
      "properties": {
        "albums": {
          "description": "Output only. List of albums shown in the Albums tab of the user's Google Photos app.",
          "items": {
            "$ref": "Album"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Output only. Token to use to get the next set of albums. Populated if there are more albums to retrieve for this request."
        }
      }
    },
    "BatchRemoveMediaItemsFromAlbumRequest": {
      "description": "Request to remove a list of media items from an album.",
      "id": "BatchRemoveMediaItemsFromAlbumRequest",
      "properties": {
        "mediaItemIds": {
          "description": "Required. Identifiers of the MediaItems to be removed. Must not contain repeated identifiers and cannot be empty. The maximum number of media items that can be removed in one call is 50.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object"
    },
    "SearchMediaItemsRequest": {
      "properties": {
        "albumId": {
          "description": "Identifier of an album. If populated, lists all media items in specified album. Can't set in conjunction with any filters.",
          "type": "string"
        },
        "pageSize": {
          "format": "int32",
          "type": "integer",
          "description": "Maximum number of media items to return in the response. Fewer media items might be returned than the specified number. The default `pageSize` is 25, the maximum is 100."
        },
        "pageToken": {
          "description": "A continuation token to get the next page of the results. Adding this to the request returns the rows after the `pageToken`. The `pageToken` should be the value returned in the `nextPageToken` parameter in the response to the `searchMediaItems` request.",
          "type": "string"
        },
        "filters": {
          "description": "Filters to apply to the request. Can't be set in conjunction with an `albumId`.",
          "$ref": "Filters"
        }
      },
      "id": "SearchMediaItemsRequest",
      "type": "object",
      "description": "Request to search for media items in a user's library. If the album id is specified, this call will return the list of media items in the album. If neither filters nor album id are specified, this call will return all media items in a user's Google Photos library. If filters are specified, this call will return all media items in the user's library that fulfill the filter criteria. Filters and album id must not both be set, as this will result in an invalid request."
    },
    "ContributorInfo": {
      "type": "object",
      "description": "Information about the user who added the media item. Note that this information is included only if the media item is within a shared album created by your app and you have the sharing scope.",
      "id": "ContributorInfo",
      "properties": {
        "profilePictureBaseUrl": {
          "type": "string",
          "description": "URL to the profile picture of the contributor."
        },
        "displayName": {
          "description": "Display name of the contributor.",
          "type": "string"
        }
      }
    },
    "JoinSharedAlbumRequest": {
      "description": "Request to join a shared album on behalf of the user. This uses a shareToken which can be acquired via the shareAlbum or listSharedAlbums calls.",
      "id": "JoinSharedAlbumRequest",
      "properties": {
        "shareToken": {
          "type": "string",
          "description": "Required. Token to join the shared album on behalf of the user."
        }
      },
      "type": "object"
    },
    "ShareAlbumRequest": {
      "properties": {
        "sharedAlbumOptions": {
          "$ref": "SharedAlbumOptions",
          "description": "Options to be set when converting the album to a shared album."
        }
      },
      "id": "ShareAlbumRequest",
      "type": "object",
      "description": "Request to make an album shared in Google Photos."
    },
    "DateRange": {
      "properties": {
        "startDate": {
          "$ref": "Date",
          "description": "The start date (included as part of the range) in one of the formats described."
        },
        "endDate": {
          "description": "The end date (included as part of the range). It must be specified in the same format as the start date.",
          "$ref": "Date"
        }
      },
      "description": "Defines a range of dates. Both dates must be of the same format. For more information, see Date.",
      "id": "DateRange",
      "type": "object"
    },
    "BatchGetMediaItemsResponse": {
      "id": "BatchGetMediaItemsResponse",
      "description": "Response to retrieve a list of media items.",
      "properties": {
        "mediaItemResults": {
          "items": {
            "$ref": "MediaItemResult"
          },
          "description": "Output only. List of media items retrieved. Note that even if the call to BatchGetMediaItems succeeds, there may have been failures for some media items in the batch. These failures are indicated in each MediaItemResult.status.",
          "type": "array"
        }
      },
      "type": "object"
    },
    "DateFilter": {
      "id": "DateFilter",
      "properties": {
        "dates": {
          "items": {
            "$ref": "Date"
          },
          "description": "List of dates that match the media items' creation date. A maximum of 5 dates can be included per request.",
          "type": "array"
        },
        "ranges": {
          "type": "array",
          "items": {
            "$ref": "DateRange"
          },
          "description": "List of dates ranges that match the media items' creation date. A maximum of 5 dates ranges can be included per request."
        }
      },
      "description": "This filter defines the allowed dates or date ranges for the media returned. It's possible to pick a set of specific dates and a set of date ranges.",
      "type": "object"
    },
    "LeaveSharedAlbumRequest": {
      "description": "Request to leave a shared album on behalf of the user. This uses a shareToken which can be acquired via the or listSharedAlbums or getAlbum calls.",
      "id": "LeaveSharedAlbumRequest",
      "type": "object",
      "properties": {
        "shareToken": {
          "type": "string",
          "description": "Required. Token to leave the shared album on behalf of the user."
        }
      }
    },
    "BatchAddMediaItemsToAlbumRequest": {
      "id": "BatchAddMediaItemsToAlbumRequest",
      "properties": {
        "mediaItemIds": {
          "type": "array",
          "description": "Required. Identifiers of the MediaItems to be added. The maximum number of media items that can be added in one call is 50.",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "description": "Request to add media items to an album."
    },
    "MediaMetadata": {
      "id": "MediaMetadata",
      "properties": {
        "width": {
          "type": "string",
          "description": "Original width (in pixels) of the media item.",
          "format": "int64"
        },
        "photo": {
          "$ref": "Photo",
          "description": "Metadata for a photo media type."
        },
        "height": {
          "description": "Original height (in pixels) of the media item.",
          "type": "string",
          "format": "int64"
        },
        "creationTime": {
          "type": "string",
          "description": "Time when the media item was first created (not when it was uploaded to Google Photos).",
          "format": "google-datetime"
        },
        "video": {
          "description": "Metadata for a video media type.",
          "$ref": "Video"
        }
      },
      "type": "object",
      "description": "Metadata for a media item."
    },
    "NewEnrichmentItem": {
      "type": "object",
      "properties": {
        "textEnrichment": {
          "$ref": "TextEnrichment",
          "description": "Text to be added to the album."
        },
        "locationEnrichment": {
          "$ref": "LocationEnrichment",
          "description": "Location to be added to the album."
        },
        "mapEnrichment": {
          "$ref": "MapEnrichment",
          "description": "Map to be added to the album."
        }
      },
      "description": "A new enrichment item to be added to an album, used by the `albums.addEnrichment` call.",
      "id": "NewEnrichmentItem"
    },
    "SharedAlbumOptions": {
      "id": "SharedAlbumOptions",
      "properties": {
        "isCollaborative": {
          "type": "boolean",
          "description": "True if the shared album allows collaborators (users who have joined the album) to add media items to it. Defaults to false."
        },
        "isCommentable": {
          "type": "boolean",
          "description": "True if the shared album allows collaborators (users who have joined the album) to add comments to the album. Defaults to false."
        }
      },
      "description": "Options that control the sharing of an album.",
      "type": "object"
    },
    "UnshareAlbumRequest": {
      "id": "UnshareAlbumRequest",
      "description": "Request to unshare a shared album in Google Photos.",
      "type": "object",
      "properties": {}
    },
    "JoinSharedAlbumResponse": {
      "properties": {
        "album": {
          "description": "Shared album that the user has joined.",
          "$ref": "Album"
        }
      },
      "description": "Response to successfully joining the shared album on behalf of the user.",
      "id": "JoinSharedAlbumResponse",
      "type": "object"
    },
    "AlbumPosition": {
      "type": "object",
      "id": "AlbumPosition",
      "properties": {
        "position": {
          "enum": [
            "POSITION_TYPE_UNSPECIFIED",
            "FIRST_IN_ALBUM",
            "LAST_IN_ALBUM",
            "AFTER_MEDIA_ITEM",
            "AFTER_ENRICHMENT_ITEM"
          ],
          "description": "Type of position, for a media or enrichment item.",
          "type": "string",
          "enumDescriptions": [
            "Default value if this enum isn't set.",
            "At the beginning of the album.",
            "At the end of the album.",
            "After a media item.",
            "After an enrichment item."
          ]
        },
        "relativeMediaItemId": {
          "type": "string",
          "description": "The media item to which the position is relative to. Only used when position type is AFTER_MEDIA_ITEM."
        },
        "relativeEnrichmentItemId": {
          "type": "string",
          "description": "The enrichment item to which the position is relative to. Only used when position type is AFTER_ENRICHMENT_ITEM."
        }
      },
      "description": "Specifies a position in an album."
    },
    "EnrichmentItem": {
      "description": "An enrichment item.",
      "type": "object",
      "id": "EnrichmentItem",
      "properties": {
        "id": {
          "description": "Identifier of the enrichment item.",
          "type": "string"
        }
      }
    },
    "SearchMediaItemsResponse": {
      "id": "SearchMediaItemsResponse",
      "properties": {
        "mediaItems": {
          "items": {
            "$ref": "MediaItem"
          },
          "description": "Output only. List of media items that match the search parameters.",
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Output only. Use this token to get the next set of media items. Its presence is the only reliable indicator of more media items being available in the next request."
        }
      },
      "type": "object",
      "description": "List of media items that match the search parameters."
    },
    "ListSharedAlbumsResponse": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "Output only. Token to use to get the next set of shared albums. Populated if there are more shared albums to retrieve for this request.",
          "type": "string"
        },
        "sharedAlbums": {
          "items": {
            "$ref": "Album"
          },
          "type": "array",
          "description": "Output only. List of shared albums."
        }
      },
      "description": "List of shared albums requested.",
      "id": "ListSharedAlbumsResponse"
    },
    "ShareAlbumResponse": {
      "properties": {
        "shareInfo": {
          "description": "Output only. Information about the shared album.",
          "$ref": "ShareInfo"
        }
      },
      "description": "Response to successfully sharing an album.",
      "type": "object",
      "id": "ShareAlbumResponse"
    },
    "MediaItemResult": {
      "description": "Result of retrieving a media item.",
      "type": "object",
      "properties": {
        "mediaItem": {
          "description": "Media item retrieved from the user's library. It's populated if no errors occurred and the media item was fetched successfully.",
          "$ref": "MediaItem"
        },
        "status": {
          "description": "If an error occurred while accessing this media item, this field is populated with information related to the error. For details regarding this field, see Status.",
          "$ref": "Status"
        }
      },
      "id": "MediaItemResult"
    },
    "CreateAlbumRequest": {
      "id": "CreateAlbumRequest",
      "properties": {
        "album": {
          "description": "Required. The album to be created.",
          "$ref": "Album"
        }
      },
      "description": "Request to create an album in Google Photos.",
      "type": "object"
    },
    "LeaveSharedAlbumResponse": {
      "description": "Response to successfully leaving the shared album on behalf of the user.",
      "type": "object",
      "id": "LeaveSharedAlbumResponse",
      "properties": {}
    },
    "Video": {
      "description": "Metadata that is specific to a video, for example, fps and processing status. Some of these fields may be null or not included.",
      "id": "Video",
      "type": "object",
      "properties": {
        "cameraMake": {
          "type": "string",
          "description": "Brand of the camera with which the video was taken."
        },
        "fps": {
          "format": "double",
          "type": "number",
          "description": "Frame rate of the video."
        },
        "cameraModel": {
          "description": "Model of the camera with which the video was taken.",
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "Processing status of the video.",
          "enum": [
            "UNSPECIFIED",
            "PROCESSING",
            "READY",
            "FAILED"
          ],
          "enumDescriptions": [
            "Video processing status is unknown.",
            "Video is being processed. The user sees an icon for this video in the Google Photos app; however, it isn't playable yet.",
            "Video processing is complete and it is now ready for viewing. Important: attempting to download a video not in the READY state may fail.",
            "Something has gone wrong and the video has failed to process."
          ]
        }
      }
    },
    "Album": {
      "id": "Album",
      "type": "object",
      "description": "Representation of an album in Google Photos. Albums are containers for media items. If an album has been shared by the application, it contains an extra `shareInfo` property.",
      "properties": {
        "productUrl": {
          "description": "[Output only] Google Photos URL for the album. The user needs to be signed in to their Google Photos account to access this link.",
          "type": "string"
        },
        "coverPhotoMediaItemId": {
          "description": "Identifier for the media item associated with the cover photo.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Identifier for the album. This is a persistent identifier that can be used between sessions to identify this album."
        },
        "coverPhotoBaseUrl": {
          "description": "[Output only] A URL to the cover photo's bytes. This shouldn't be used as is. Parameters should be appended to this URL before use. See the [developer documentation](https://developers.google.com/photos/library/guides/access-media-items#base-urls) for a complete list of supported parameters. For example, `'=w2048-h1024'` sets the dimensions of the cover photo to have a width of 2048 px and height of 1024 px.",
          "type": "string"
        },
        "mediaItemsCount": {
          "type": "string",
          "description": "[Output only] The number of media items in the album.",
          "format": "int64"
        },
        "isWriteable": {
          "description": "[Output only] True if you can create media items in this album. This field is based on the scopes granted and permissions of the album. If the scopes are changed or permissions of the album are changed, this field is updated.",
          "type": "boolean"
        },
        "shareInfo": {
          "description": "[Output only] Information related to shared albums. This field is only populated if the album is a shared album, the developer created the album and the user has granted the `photoslibrary.sharing` scope.",
          "$ref": "ShareInfo"
        },
        "title": {
          "type": "string",
          "description": "Name of the album displayed to the user in their Google Photos account. This string shouldn't be more than 500 characters."
        }
      }
    },
    "FeatureFilter": {
      "description": "This filter defines the features that the media items should have.",
      "id": "FeatureFilter",
      "type": "object",
      "properties": {
        "includedFeatures": {
          "items": {
            "type": "string",
            "enum": [
              "NONE",
              "FAVORITES"
            ],
            "enumDescriptions": [
              "Treated as if no filters are applied. All features are included.",
              "Media items that the user has marked as favorites in the Google Photos app."
            ]
          },
          "description": "The set of features to be included in the media item search results. The items in the set are ORed and may match any of the specified features.",
          "type": "array"
        }
      }
    },
    "MediaItem": {
      "description": "Representation of a media item (such as a photo or video) in Google Photos.",
      "id": "MediaItem",
      "properties": {
        "contributorInfo": {
          "description": "Information about the user who created this media item.",
          "$ref": "ContributorInfo"
        },
        "mediaMetadata": {
          "description": "Metadata related to the media item, such as, height, width, or creation time.",
          "$ref": "MediaMetadata"
        },
        "description": {
          "type": "string",
          "description": "Description of the media item. This is shown to the user in the item's info section in the Google Photos app."
        },
        "productUrl": {
          "description": "Google Photos URL for the media item. This link is available to the user only if they're signed in.",
          "type": "string"
        },
        "baseUrl": {
          "description": "A URL to the media item's bytes. This shouldn't be used as is. Parameters should be appended to this URL before use. See the [developer documentation](https://developers.google.com/photos/library/guides/access-media-items#base-urls) for a complete list of supported parameters. For example, `'=w2048-h1024'` will set the dimensions of a media item of type photo to have a width of 2048 px and height of 1024 px.",
          "type": "string"
        },
        "mimeType": {
          "description": "MIME type of the media item. For example, `image/jpeg`.",
          "type": "string"
        },
        "filename": {
          "description": "Filename of the media item. This is shown to the user in the item's info section in the Google Photos app.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Identifier for the media item. This is a persistent identifier that can be used between sessions to identify this media item."
        }
      },
      "type": "object"
    },
    "BatchAddMediaItemsToAlbumResponse": {
      "properties": {},
      "id": "BatchAddMediaItemsToAlbumResponse",
      "type": "object",
      "description": "Response for adding media items to an album."
    },
    "AddEnrichmentToAlbumResponse": {
      "id": "AddEnrichmentToAlbumResponse",
      "properties": {
        "enrichmentItem": {
          "description": "Output only. Enrichment which was added.",
          "$ref": "EnrichmentItem"
        }
      },
      "type": "object",
      "description": "The enrichment item that's created."
    },
    "AddEnrichmentToAlbumRequest": {
      "properties": {
        "newEnrichmentItem": {
          "description": "Required. The enrichment to be added.",
          "$ref": "NewEnrichmentItem"
        },
        "albumPosition": {
          "description": "Required. The position in the album where the enrichment is to be inserted.",
          "$ref": "AlbumPosition"
        }
      },
      "type": "object",
      "description": "Request to add an enrichment to a specific album at a specific position.",
      "id": "AddEnrichmentToAlbumRequest"
    },
    "LatLng": {
      "type": "object",
      "description": "An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.",
      "id": "LatLng",
      "properties": {
        "latitude": {
          "type": "number",
          "description": "The latitude in degrees. It must be in the range [-90.0, +90.0].",
          "format": "double"
        },
        "longitude": {
          "format": "double",
          "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
          "type": "number"
        }
      }
    },
    "BatchCreateMediaItemsResponse": {
      "properties": {
        "newMediaItemResults": {
          "type": "array",
          "description": "Output only. List of media items created.",
          "items": {
            "$ref": "NewMediaItemResult"
          }
        }
      },
      "id": "BatchCreateMediaItemsResponse",
      "type": "object",
      "description": "List of media items created."
    },
    "Date": {
      "type": "object",
      "id": "Date",
      "description": "Represents a whole calendar date. Set `day` to 0 when only the month and year are significant, for example, all of December 2018. Set `day` and `month` to 0 if only the year is significant, for example, the entire of 2018. Set `year` to 0 when only the day and month are significant, for example, an anniversary or birthday. Unsupported: Setting all values to 0, only `month` to 0, or both `day` and `year` to 0 at the same time.",
      "properties": {
        "year": {
          "format": "int32",
          "description": "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
          "type": "integer"
        },
        "day": {
          "format": "int32",
          "type": "integer",
          "description": "Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a year/month where the day isn't significant."
        },
        "month": {
          "type": "integer",
          "format": "int32",
          "description": "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day."
        }
      }
    },
    "Photo": {
      "description": "Metadata that is specific to a photo, such as, ISO, focal length and exposure time. Some of these fields may be null or not included.",
      "type": "object",
      "id": "Photo",
      "properties": {
        "cameraModel": {
          "description": "Model of the camera with which the photo was taken.",
          "type": "string"
        },
        "cameraMake": {
          "type": "string",
          "description": "Brand of the camera with which the photo was taken."
        },
        "focalLength": {
          "format": "float",
          "description": "Focal length of the camera lens with which the photo was taken.",
          "type": "number"
        },
        "exposureTime": {
          "type": "string",
          "format": "google-duration",
          "description": "Exposure time of the camera aperture when the photo was taken."
        },
        "isoEquivalent": {
          "type": "integer",
          "format": "int32",
          "description": "ISO of the camera with which the photo was taken."
        },
        "apertureFNumber": {
          "format": "float",
          "description": "Aperture f number of the camera lens with which the photo was taken.",
          "type": "number"
        }
      }
    },
    "ContentFilter": {
      "id": "ContentFilter",
      "properties": {
        "excludedContentCategories": {
          "items": {
            "enumDescriptions": [
              "Default content category. This category is ignored when any other category is used in the filter.",
              "Media items containing landscapes.",
              "Media items containing receipts.",
              "Media items containing cityscapes.",
              "Media items containing landmarks.",
              "Media items that are selfies.",
              "Media items containing people.",
              "Media items containing pets.",
              "Media items from weddings.",
              "Media items from birthdays.",
              "Media items containing documents.",
              "Media items taken during travel.",
              "Media items containing animals.",
              "Media items containing food.",
              "Media items from sporting events.",
              "Media items taken at night.",
              "Media items from performances.",
              "Media items containing whiteboards.",
              "Media items that are screenshots.",
              "Media items that are considered to be utility. These include, but aren't limited to documents, screenshots, whiteboards etc.",
              "Media items containing art.",
              "Media items containing crafts.",
              "Media items related to fashion.",
              "Media items containing houses.",
              "Media items containing gardens.",
              "Media items containing flowers.",
              "Media items taken of holidays."
            ],
            "type": "string",
            "enum": [
              "NONE",
              "LANDSCAPES",
              "RECEIPTS",
              "CITYSCAPES",
              "LANDMARKS",
              "SELFIES",
              "PEOPLE",
              "PETS",
              "WEDDINGS",
              "BIRTHDAYS",
              "DOCUMENTS",
              "TRAVEL",
              "ANIMALS",
              "FOOD",
              "SPORT",
              "NIGHT",
              "PERFORMANCES",
              "WHITEBOARDS",
              "SCREENSHOTS",
              "UTILITY",
              "ARTS",
              "CRAFTS",
              "FASHION",
              "HOUSES",
              "GARDENS",
              "FLOWERS",
              "HOLIDAYS"
            ]
          },
          "description": "The set of categories which are not to be included in the media item search results. The items in the set are ORed. There's a maximum of 10 `excludedContentCategories` per request.",
          "type": "array"
        },
        "includedContentCategories": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "NONE",
              "LANDSCAPES",
              "RECEIPTS",
              "CITYSCAPES",
              "LANDMARKS",
              "SELFIES",
              "PEOPLE",
              "PETS",
              "WEDDINGS",
              "BIRTHDAYS",
              "DOCUMENTS",
              "TRAVEL",
              "ANIMALS",
              "FOOD",
              "SPORT",
              "NIGHT",
              "PERFORMANCES",
              "WHITEBOARDS",
              "SCREENSHOTS",
              "UTILITY",
              "ARTS",
              "CRAFTS",
              "FASHION",
              "HOUSES",
              "GARDENS",
              "FLOWERS",
              "HOLIDAYS"
            ],
            "enumDescriptions": [
              "Default content category. This category is ignored when any other category is used in the filter.",
              "Media items containing landscapes.",
              "Media items containing receipts.",
              "Media items containing cityscapes.",
              "Media items containing landmarks.",
              "Media items that are selfies.",
              "Media items containing people.",
              "Media items containing pets.",
              "Media items from weddings.",
              "Media items from birthdays.",
              "Media items containing documents.",
              "Media items taken during travel.",
              "Media items containing animals.",
              "Media items containing food.",
              "Media items from sporting events.",
              "Media items taken at night.",
              "Media items from performances.",
              "Media items containing whiteboards.",
              "Media items that are screenshots.",
              "Media items that are considered to be utility. These include, but aren't limited to documents, screenshots, whiteboards etc.",
              "Media items containing art.",
              "Media items containing crafts.",
              "Media items related to fashion.",
              "Media items containing houses.",
              "Media items containing gardens.",
              "Media items containing flowers.",
              "Media items taken of holidays."
            ]
          },
          "description": "The set of categories to be included in the media item search results. The items in the set are ORed. There's a maximum of 10 `includedContentCategories` per request."
        }
      },
      "type": "object",
      "description": "This filter allows you to return media items based on the content type. It's possible to specify a list of categories to include, and/or a list of categories to exclude. Within each list, the categories are combined with an OR. The content filter `includedContentCategories`: [c1, c2, c3] would get media items that contain (c1 OR c2 OR c3). The content filter `excludedContentCategories`: [c1, c2, c3] would NOT get media items that contain (c1 OR c2 OR c3). You can also include some categories while excluding others, as in this example: `includedContentCategories`: [c1, c2], `excludedContentCategories`: [c3, c4] The previous example would get media items that contain (c1 OR c2) AND NOT (c3 OR c4). A category that appears in `includedContentategories` must not appear in `excludedContentCategories`."
    }
  },
  "title": "Photos Library API",
  "discoveryVersion": "v1",
  "id": "photoslibrary:v1"
}
